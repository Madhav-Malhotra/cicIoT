import numpy as np
import pandas as pd

# Load pretrained data
cols = ["duration", "srate", "drate", "syn_flag_number", "psh_flag_number", 
        "ack_flag_number", "ack_count", "syn_count", "rst_count", "header_length", 
        "https", "ssh", "flow_duration", "avg", "max", "tot_sum", "min", "iat", 
        "magnitude", "radius", "variance"]


mean = np.array([1.14469135e+02, 1.94699208e+03, 0.00000000e+00, 0.00000000e+00,
       1.83903860e-02, 8.43590677e-01, 4.63037151e-02, 8.07404316e-01,
       1.05775628e+03, 9.92190553e+05, 7.02931537e-01, 0.00000000e+00,
       3.90106165e+01, 6.08084661e+02, 1.68578757e+03, 6.41062220e+03,
       1.72815522e+02, 8.30938991e+07, 2.96843675e+01, 6.90205567e+02,
       8.66938918e-01]) 

std = np.array([5.07708888e+01, 1.94520677e+04, 1.00000000e+00, 1.00000000e+00,
       1.34358400e-01, 3.63242958e-01, 1.41623975e-01, 7.73183996e-01,
       1.21748857e+03, 1.29659635e+06, 4.56966948e-01, 1.00000000e+00,
       5.09213855e+01, 6.56714734e+02, 1.94151708e+03, 7.57378599e+03,
       3.24495778e+02, 8.32604960e+07, 1.74309786e+01, 7.83867840e+02,
       2.27918862e-01])

detectors = np.array([[ 5.09233102e-02, -7.08748698e-02,  0.00000000e+00,
         0.00000000e+00,  9.84049961e-02,  4.30579871e-01,
        -2.03979954e-01, -1.65800750e-01, -2.95901477e-01,
        -3.58911097e-01,  1.13641061e-01,  0.00000000e+00,
        -6.56345487e-02, -5.25797009e-01, -4.38881218e-01,
        -5.20066440e-01, -2.99670428e-01, -7.78655484e-02,
        -5.22136509e-01, -4.10365999e-01,  2.29081139e-01],
       [ 3.35455239e-01, -9.48364437e-02,  0.00000000e+00,
         0.00000000e+00, -1.01434126e-01,  4.27315444e-01,
        -3.00891489e-01, -3.68289016e-02,  2.27601576e+00,
         2.24903226e+00,  6.16218448e-01,  0.00000000e+00,
         5.54002345e-01,  2.20683485e-01,  1.61120638e-01,
         2.54576594e-01, -1.14108257e-01,  1.90102071e-01,
         3.46551657e-01,  2.49300420e-01,  2.46910766e-01],
       [-4.69261020e-01, -9.97852683e-02,  0.00000000e+00,
         0.00000000e+00, -1.36875421e-01, -1.54324269e+00,
         3.92468870e-01, -6.02566361e-01, -7.85456836e-01,
        -7.42153585e-01, -1.51760924e+00,  0.00000000e+00,
         5.59258223e+00, -7.52080858e-01, -7.36440182e-01,
        -7.00135291e-01, -3.44963223e-01, -1.67830750e-01,
        -8.51216495e-01, -7.62362123e-01,  2.89927363e-01],
       [-5.06495953e-01,  1.11775614e-01,  0.00000000e+00,
         0.00000000e+00, -1.36874974e-01, -2.32233810e+00,
        -8.57160687e-02, -7.90993094e-01, -6.32392585e-01,
        -6.40492380e-01, -1.51612580e+00,  0.00000000e+00,
         1.53681055e-01, -7.05315411e-01, -6.43666923e-01,
        -6.40585601e-01, -3.43850464e-01, -3.84261496e-02,
        -7.86631286e-01, -6.67353451e-01,  2.95246065e-01],
       [-2.94004023e-01, -8.46875086e-02,  0.00000000e+00,
         0.00000000e+00, -1.22698553e-01,  2.68032432e-01,
         3.19680548e+00,  3.23739201e-01, -5.76257110e-01,
        -5.87716818e-01, -3.12782824e-01,  0.00000000e+00,
        -2.78269546e-03, -6.50806189e-01, -5.34406185e-01,
        -5.83967447e-01, -3.28703046e-01,  8.59183347e-05,
        -6.89884245e-01, -5.53025126e-01,  2.62892187e-01],
       [-5.56709886e-01, -9.01566520e-02,  0.00000000e+00,
         0.00000000e+00, -2.51476411e-02,  4.17876989e-01,
        -3.04934859e-01,  5.72135329e-01,  1.76320732e-01,
         2.52119035e-01,  5.33845663e-01,  0.00000000e+00,
        -3.36406618e-01,  1.67147183e+00,  5.57441294e-01,
         4.55057055e-01,  2.64803219e+00, -9.00993586e-01,
         1.60470641e+00,  2.57629573e-01, -7.50179946e-01],
       [-1.06041610e-01, -7.87773728e-02,  0.00000000e+00,
         0.00000000e+00, -1.12776749e-01,  3.83483917e-01,
        -2.58033574e-01,  3.50309730e-01, -7.09883422e-02,
        -1.55960266e-02,  3.46434683e-01,  0.00000000e+00,
        -3.76861632e-01,  7.94243395e-01,  9.88126755e-01,
         1.24433494e+00, -2.40013868e-01,  7.45759726e-01,
         9.53444660e-01,  1.07323956e+00,  5.16229033e-01],
       [ 1.59593379e+00, -9.37107354e-02,  0.00000000e+00,
         0.00000000e+00, -1.36876777e-01,  4.30592358e-01,
        -2.95135647e-01,  5.40950418e-01,  3.15246761e-01,
         3.81287932e-01,  6.09003186e-01,  0.00000000e+00,
        -2.68518806e-01, -7.84805179e-01, -7.65987635e-01,
        -7.60168254e-01, -3.30105513e-01, -8.12760592e-01,
        -9.68212068e-01, -7.94027746e-01, -2.68789029e+00]])

max_dist = 500.0

def check_benign(csv_file : str) -> np.array:
    '''
    Reads data in CSV file and returns True for each benign 
    record, False otherwise.
    '''

    # Select CSV columns specified above
    df = pd.read_csv(csv_file)
    df.columns = ['_'.join(c.lower().split(' ')) for c in df.columns]
    X = np.expand_dims(df[cols].to_numpy(), axis=1)
  
    # Normalise data
    X = (X - mean) / std

    # Calculate average distance from each detector
    dist = np.mean( np.sum((X-detectors)**2, axis=-1), axis=-1 )
    return dist < max_dist